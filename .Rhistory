set.seed(123)
for (k in 1:nrow(test)) {
x[, , k] <- cbind(qnorm(runif(10000), mean = pars_u$mu[k], sd = pars_u$sigma[k]),
qnorm(runif(10000), mean = pars_v$mu[k], sd = pars_v$sigma[k]))
}
es_separate <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_separate <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
x <- array(NA, dim = c(10000, 2, nrow(test)))
for (k in 1:nrow(test)) {
MU <- c(pars_uv$mu1[k], pars_uv$mu2[k])
sig1 <- pars_uv$sigma1[k]
sig2 <- pars_uv$sigma2[k]
rho <- pars_uv$rho[k]
SIGMA <- matrix(c(sig1^2, rho*sig1*sig2, rho*sig1*sig2, sig2^2), byrow = T, ncol = 2)
x[, , k] <- rmvnorm(10000, mu = MU, sigma = SIGMA, seed = 123)
}
es_joint <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_joint <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, aggregate = mean)
df_bi <- data.frame(matrix(c(es_separate, es_joint, vs_separate, vs_joint), ncol = 2, byrow = F), row.names = c("uni", "bi"))
colnames(df_bi) <- c("ES", "VS")
df_bi
plot(x = unique(data$date[data$date > as.Date("2018-05-31")]),
y = pars_uv$rho,
type = "l",
xlab = "Date",
ylab = "Correlation")
plot(x = unique(data$date[data$date > as.Date("2018-05-31")]),
y = pars_uv$rho,
type = "l",
xlab = "Date",
ylab = "Correlation")
grid()
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_01262_ref50_yb2.Rdata")
output.u <- output
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_01262_ref80_yb2.Rdata")
output.v <- output
output.u$ENS[k, ]
x <- array(NA, dim = c(10000, 2, nrow(test)))
set.seed(123)
for (k in 1:nrow(test)) {
x[, , k] <- cbind(output.u$ENS[k, ], output.v$ENS[k, ])
}
es_separate <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_separate <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
es_separate
es_separate <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_separate <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
dvine_indep <- c(es_separate, vs_separate)
df_bi <- rbind(df_bi, dvine_indep)
df_bi
rownames(df_bi) <- "dvine_indep"
rownames(df_bi)[3] <- "dvine_indep"
df_bi
plot(x = unique(data$date[data$date > as.Date("2018-05-31")]),
y = pars_uv$rho,
type = "l",
xlab = "Date",
ylab = "Correlation")
grid()
plot(x = unique(data$date[data$date > as.Date("2018-05-31")]),
y = pars_uv$rho,
type = "l",
xlab = "Date",
ylab = "Correlation",
main = paste0("Station ", station))
grid()
# select station and obtain training as well as test data
k <- 2 # "01262" (Munich); "02014" (Hannover)
station <- c("MÃ¼nchen-Flughafen", "Hannover", sample(names, 1))[k]
train <- data[data$date <= as.Date("2018-05-31") & data$name == station, vars]
test <- data[data$date > as.Date("2018-05-31") & data$name == station, vars]
# fit model u-component
m_u <- glmboostLSS(formula = obs.u ~ .,
data = train[, -2],
families = GaussianLSS(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# fit model v-component
m_v <- glmboostLSS(formula = obs.v ~ .,
data = train[, -1],
families = GaussianLSS(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# fit bivariate normal distribution
m_uv <- glmboostLSS(formula = cbind(obs.u, obs.v) ~.,
data = train,
families = GaussianBV(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# get parameters for test period
pars_u <- predict(m_u, newdata = test, type = "response")
pars_v <- predict(m_v, newdata = test, type = "response")
pars_uv <- predict(m_uv, newdata = test, type = "response")
###################################
# UNIVARIATE EVALUATION
###################################
m <- 51 # number of ensemble forecasts
# mean CRPS for each component
crps_u <- mean(crps_norm(y = test$obs.u, mean = pars_u$mu, sd = pars_u$sigma))
ae_u <- ae(y = test$obs.u, x = as.vector(pars_u$mu), aggregate = mean)
cpi_u <- cpi(y = test$obs.u,
lower = as.vector(qnorm(1/m, mean = pars_u$mu, sd = pars_u$sigma)),
upper = as.vector(qnorm((m-1)/m, mean = pars_u$mu, sd = pars_u$sigma)),
nominal.coverage = (m-1)/(m+1)*100,
separate = c("coverage", "width"), aggregate = mean)
crps_v <- mean(crps_norm(y = test$obs.v, mean = pars_v$mu, sd = pars_v$sigma))
ae_v <- ae(y = test$obs.v, x = as.vector(pars_v$mu), aggregate = mean)
cpi_v <- cpi(y = test$obs.v,
lower = as.vector(qnorm(1/m, mean = pars_v$mu, sd = pars_v$sigma)),
upper = as.vector(qnorm((m-1)/m, mean = pars_v$mu, sd = pars_v$sigma)),
nominal.coverage = (m-1)/(m+1)*100,
separate = c("coverage", "width"), aggregate = mean)
df_separate <- matrix(c(crps_u, crps_v, ae_u, ae_v, cpi_u$coverage, cpi_v$coverage, cpi_u$width, cpi_v$width), nrow = 2, byrow = F)
crps_u <- mean(crps_norm(y = test$obs.u, mean = pars_uv$mu1, sd = pars_uv$sigma1))
ae_u <- ae(y = test$obs.u, x = as.vector(pars_uv$mu1), aggregate = mean)
cpi_u <- cpi(y = test$obs.u,
lower = as.vector(qnorm(1/m, mean = pars_uv$mu1, sd = pars_uv$sigma1)),
upper = as.vector(qnorm((m-1)/m, mean = pars_uv$mu1, sd = pars_uv$sigma1)),
nominal.coverage = (m-1)/(m+1)*100,
separate = c("coverage", "width"), aggregate = mean)
crps_v <- mean(crps_norm(y = test$obs.v, mean = pars_uv$mu2, sd = pars_uv$sigma2))
ae_v <- ae(y = test$obs.v, x = as.vector(pars_uv$mu2), aggregate = mean)
cpi_v <- cpi(y = test$obs.v,
lower = as.vector(qnorm(1/m, mean = pars_uv$mu2, sd = pars_uv$sigma2)),
upper = as.vector(qnorm((m-1)/m, mean = pars_uv$mu2, sd = pars_uv$sigma2)),
nominal.coverage = (m-1)/(m+1)*100,
separate = c("coverage", "width"), aggregate = mean)
df_joint <- matrix(c(crps_u, crps_v, ae_u, ae_v, cpi_u$coverage, cpi_v$coverage, cpi_u$width, cpi_v$width), nrow = 2, byrow = F)
df <- round(data.frame(rbind(df_separate, df_joint), row.names = c("u_uni", "v_uni", "u_bi", "v_bi")), 3)
colnames(df) <- c("CRPS", "MAE", "Coverage", "Width")
# df[c(1,3,2,4), ]
if (k == 1) {
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_01262_ref50_yb2.Rdata")
df <- rbind(df, round(c(mean(output$CRPS), mean(output$AE), mean(output$COVERAGE), mean(output$WIDTH)), 3))
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_01262_ref80_yb2.Rdata")
df <- rbind(df, round(c(mean(output$CRPS), mean(output$AE), mean(output$COVERAGE), mean(output$WIDTH)), 3))
} else if (k == 2) {
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_02014_ref70_yb2.Rdata")
df <- rbind(df, round(c(mean(output$CRPS), mean(output$AE), mean(output$COVERAGE), mean(output$WIDTH)), 3))
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_02014_ref60_yb2.Rdata")
df <- rbind(df, round(c(mean(output$CRPS), mean(output$AE), mean(output$COVERAGE), mean(output$WIDTH)), 3))
}
rownames(df)[c(5,6)] <- c("u_dvine", "v_dvine")
df[c(1,5,3,2,6,4), ]
###################################
# BIVARIATE EVALUATION
###################################
x <- array(NA, dim = c(10000, 2, nrow(test)))
set.seed(123)
for (k in 1:nrow(test)) {
x[, , k] <- cbind(qnorm(runif(10000), mean = pars_u$mu[k], sd = pars_u$sigma[k]),
qnorm(runif(10000), mean = pars_v$mu[k], sd = pars_v$sigma[k]))
}
es_separate <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_separate <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
x <- array(NA, dim = c(10000, 2, nrow(test)))
for (k in 1:nrow(test)) {
MU <- c(pars_uv$mu1[k], pars_uv$mu2[k])
sig1 <- pars_uv$sigma1[k]
sig2 <- pars_uv$sigma2[k]
rho <- pars_uv$rho[k]
SIGMA <- matrix(c(sig1^2, rho*sig1*sig2, rho*sig1*sig2, sig2^2), byrow = T, ncol = 2)
x[, , k] <- rmvnorm(10000, mu = MU, sigma = SIGMA, seed = 123)
}
es_joint <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_joint <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, aggregate = mean)
df_bi <- data.frame(matrix(c(es_separate, es_joint, vs_separate, vs_joint), ncol = 2, byrow = F), row.names = c("uni", "bi"))
colnames(df_bi) <- c("ES", "VS")
df_bi
#######################
# Independent D-vines
#######################
if (k == 1) {
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_01262_ref50_yb2.Rdata")
output.u <- output
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_01262_ref80_yb2.Rdata")
output.v <- output
} else if (k == 2) {
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_02014_ref70_yb2.Rdata")
output.u <- output
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_02014_ref60_yb2.Rdata")
output.v <- output
}
x <- array(NA, dim = c(10000, 2, nrow(test)))
set.seed(123)
for (k in 1:nrow(test)) {
x[, , k] <- cbind(output.u$ENS[k, ], output.v$ENS[k, ])
}
es_separate <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_separate <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
df_bi <- rbind(df_bi, c(es_separate, vs_separate))
rownames(df_bi)[3] <- "dvine_indep"
plot(x = unique(data$date[data$date > as.Date("2018-05-31")]),
y = pars_uv$rho,
type = "l",
xlab = "Date",
ylab = "Correlation",
main = paste0("Station ", station))
grid()
df_bi
k
k <- 2
#######################
if (k == 1) {
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_01262_ref50_yb2.Rdata")
output.u <- output
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_01262_ref80_yb2.Rdata")
output.v <- output
} else if (k == 2) {
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_02014_ref70_yb2.Rdata")
output.u <- output
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_02014_ref60_yb2.Rdata")
output.v <- output
}
x <- array(NA, dim = c(10000, 2, nrow(test)))
set.seed(123)
for (k in 1:nrow(test)) {
x[, , k] <- cbind(output.u$ENS[k, ], output.v$ENS[k, ])
}
es_separate <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_separate <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
df_bi <- rbind(df_bi, c(es_separate, vs_separate))
rownames(df_bi)[3] <- "dvine_indep"
df_bi
#  load data
load("/Users/david/ownCloud/PhD/Forschungsgruppe/DFG/Data/wind_temp_2016_2020_60stat.RData")
data <- wind_temp_2016_2020_60stat
names <- unique(data$name)
vars <- c("obs.u", "obs.v",
paste0("forc.", c("u", "v", "wspd", "wgust", "tcc", "sh", "pres", "temp"), ".mean"),
paste0("forc.", c("u", "v", "wspd", "wgust", "tcc", "sh", "pres", "temp"), ".ctrl"),
"sin.date", "cos.date")
# select station and obtain training as well as test data
k <- 2 # "01262" (Munich); "02014" (Hannover)
station <- c("MÃ¼nchen-Flughafen", "Hannover", sample(names, 1))[k]
train <- data[data$date <= as.Date("2018-05-31") & data$name == station, vars]
test <- data[data$date > as.Date("2018-05-31") & data$name == station, vars]
# fit model u-component
m_u <- glmboostLSS(formula = obs.u ~ .,
data = train[, -2],
families = GaussianLSS(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# fit model v-component
m_v <- glmboostLSS(formula = obs.v ~ .,
data = train[, -1],
families = GaussianLSS(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# fit bivariate normal distribution
m_uv <- glmboostLSS(formula = cbind(obs.u, obs.v) ~.,
data = train,
families = GaussianBV(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
library(gamboostLSS)
library(Rfast)
library(scoringRules)
library(eppverification)
source("~/Desktop/dfg/bivariateGaussian.R")
#  load data
load("/Users/david/ownCloud/PhD/Forschungsgruppe/DFG/Data/wind_temp_2016_2020_60stat.RData")
data <- wind_temp_2016_2020_60stat
names <- unique(data$name)
vars <- c("obs.u", "obs.v",
paste0("forc.", c("u", "v", "wspd", "wgust", "tcc", "sh", "pres", "temp"), ".mean"),
paste0("forc.", c("u", "v", "wspd", "wgust", "tcc", "sh", "pres", "temp"), ".ctrl"),
"sin.date", "cos.date")
# select station and obtain training as well as test data
k <- 2 # "01262" (Munich); "02014" (Hannover)
station <- c("MÃ¼nchen-Flughafen", "Hannover", sample(names, 1))[k]
train <- data[data$date <= as.Date("2018-05-31") & data$name == station, vars]
test <- data[data$date > as.Date("2018-05-31") & data$name == station, vars]
# fit model u-component
m_u <- glmboostLSS(formula = obs.u ~ .,
data = train[, -2],
families = GaussianLSS(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# fit model v-component
m_v <- glmboostLSS(formula = obs.v ~ .,
data = train[, -1],
families = GaussianLSS(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# fit bivariate normal distribution
m_uv <- glmboostLSS(formula = cbind(obs.u, obs.v) ~.,
data = train,
families = GaussianBV(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# get parameters for test period
pars_u <- predict(m_u, newdata = test, type = "response")
pars_v <- predict(m_v, newdata = test, type = "response")
pars_uv <- predict(m_uv, newdata = test, type = "response")
###################################
# UNIVARIATE EVALUATION
###################################
m <- 51 # number of ensemble forecasts
# mean CRPS for each component
crps_u <- mean(crps_norm(y = test$obs.u, mean = pars_u$mu, sd = pars_u$sigma))
ae_u <- ae(y = test$obs.u, x = as.vector(pars_u$mu), aggregate = mean)
cpi_u <- cpi(y = test$obs.u,
lower = as.vector(qnorm(1/m, mean = pars_u$mu, sd = pars_u$sigma)),
upper = as.vector(qnorm((m-1)/m, mean = pars_u$mu, sd = pars_u$sigma)),
nominal.coverage = (m-1)/(m+1)*100,
separate = c("coverage", "width"), aggregate = mean)
crps_v <- mean(crps_norm(y = test$obs.v, mean = pars_v$mu, sd = pars_v$sigma))
ae_v <- ae(y = test$obs.v, x = as.vector(pars_v$mu), aggregate = mean)
cpi_v <- cpi(y = test$obs.v,
lower = as.vector(qnorm(1/m, mean = pars_v$mu, sd = pars_v$sigma)),
upper = as.vector(qnorm((m-1)/m, mean = pars_v$mu, sd = pars_v$sigma)),
nominal.coverage = (m-1)/(m+1)*100,
separate = c("coverage", "width"), aggregate = mean)
df_separate <- matrix(c(crps_u, crps_v, ae_u, ae_v, cpi_u$coverage, cpi_v$coverage, cpi_u$width, cpi_v$width), nrow = 2, byrow = F)
crps_u <- mean(crps_norm(y = test$obs.u, mean = pars_uv$mu1, sd = pars_uv$sigma1))
ae_u <- ae(y = test$obs.u, x = as.vector(pars_uv$mu1), aggregate = mean)
cpi_u <- cpi(y = test$obs.u,
lower = as.vector(qnorm(1/m, mean = pars_uv$mu1, sd = pars_uv$sigma1)),
upper = as.vector(qnorm((m-1)/m, mean = pars_uv$mu1, sd = pars_uv$sigma1)),
nominal.coverage = (m-1)/(m+1)*100,
separate = c("coverage", "width"), aggregate = mean)
crps_v <- mean(crps_norm(y = test$obs.v, mean = pars_uv$mu2, sd = pars_uv$sigma2))
ae_v <- ae(y = test$obs.v, x = as.vector(pars_uv$mu2), aggregate = mean)
cpi_v <- cpi(y = test$obs.v,
lower = as.vector(qnorm(1/m, mean = pars_uv$mu2, sd = pars_uv$sigma2)),
upper = as.vector(qnorm((m-1)/m, mean = pars_uv$mu2, sd = pars_uv$sigma2)),
nominal.coverage = (m-1)/(m+1)*100,
separate = c("coverage", "width"), aggregate = mean)
df_joint <- matrix(c(crps_u, crps_v, ae_u, ae_v, cpi_u$coverage, cpi_v$coverage, cpi_u$width, cpi_v$width), nrow = 2, byrow = F)
df <- round(data.frame(rbind(df_separate, df_joint), row.names = c("u_uni", "v_uni", "u_bi", "v_bi")), 3)
colnames(df) <- c("CRPS", "MAE", "Coverage", "Width")
# df[c(1,3,2,4), ]
if (k == 1) {
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_01262_ref50_yb2.Rdata")
output.u <- output
df <- rbind(df, round(c(mean(output$CRPS), mean(output$AE), mean(output$COVERAGE), mean(output$WIDTH)), 3))
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_01262_ref80_yb2.Rdata")
output.v <- output
df <- rbind(df, round(c(mean(output$CRPS), mean(output$AE), mean(output$COVERAGE), mean(output$WIDTH)), 3))
} else if (k == 2) {
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.u_02014_ref70_yb2.Rdata")
output.u <- output
df <- rbind(df, round(c(mean(output$CRPS), mean(output$AE), mean(output$COVERAGE), mean(output$WIDTH)), 3))
load("/Users/david/Desktop/dfg/results_dvine_pp/validation/dvine.v_02014_ref60_yb2.Rdata")
output.v <- output
df <- rbind(df, round(c(mean(output$CRPS), mean(output$AE), mean(output$COVERAGE), mean(output$WIDTH)), 3))
}
rownames(df)[c(5,6)] <- c("u_dvine", "v_dvine")
df[c(1,5,3,2,6,4), ]
###################################
# BIVARIATE EVALUATION
###################################
x <- array(NA, dim = c(10000, 2, nrow(test)))
set.seed(123)
for (k in 1:nrow(test)) {
x[, , k] <- cbind(qnorm(runif(10000), mean = pars_u$mu[k], sd = pars_u$sigma[k]),
qnorm(runif(10000), mean = pars_v$mu[k], sd = pars_v$sigma[k]))
}
es_separate <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_separate <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
x <- array(NA, dim = c(10000, 2, nrow(test)))
for (k in 1:nrow(test)) {
MU <- c(pars_uv$mu1[k], pars_uv$mu2[k])
sig1 <- pars_uv$sigma1[k]
sig2 <- pars_uv$sigma2[k]
rho <- pars_uv$rho[k]
SIGMA <- matrix(c(sig1^2, rho*sig1*sig2, rho*sig1*sig2, sig2^2), byrow = T, ncol = 2)
x[, , k] <- rmvnorm(10000, mu = MU, sigma = SIGMA, seed = 123)
}
es_joint <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_joint <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, aggregate = mean)
df_bi <- data.frame(matrix(c(es_separate, es_joint, vs_separate, vs_joint), ncol = 2, byrow = F), row.names = c("uni", "bi"))
colnames(df_bi) <- c("ES", "VS")
#######################
# Independent D-vines
#######################
x <- array(NA, dim = c(10000, 2, nrow(test)))
set.seed(123)
for (k in 1:nrow(test)) {
x[, , k] <- cbind(output.u$ENS[k, ], output.v$ENS[k, ])
}
es_separate <- es(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
vs_separate <- vs(y = as.matrix(test[, c("obs.u", "obs.v")]), x = x, method = "mc", aggregate = mean)
df_bi <- rbind(df_bi, c(es_separate, vs_separate))
rownames(df_bi)[3] <- "dvine_indep"
df_bi
plot(x = unique(data$date[data$date > as.Date("2018-05-31")]),
y = pars_uv$rho,
type = "l",
xlab = "Date",
ylab = "Correlation",
main = paste0("Station ", station))
grid()
library(gamboostLSS)
library(Rfast)
library(scoringRules)
library(eppverification)
source("~/Desktop/dfg/bivariateGaussian.R")
#  load data
load("/Users/david/ownCloud/PhD/Forschungsgruppe/DFG/Data/wind_temp_2016_2020_60stat.RData")
data <- wind_temp_2016_2020_60stat
names <- unique(data$name)
vars <- c("obs.u", "obs.v",
paste0("forc.", c("u", "v", "wspd", "wgust", "tcc", "sh", "pres", "temp"), ".mean"),
paste0("forc.", c("u", "v", "wspd", "wgust", "tcc", "sh", "pres", "temp"), ".ctrl"),
"sin.date", "cos.date")
# select station and obtain training as well as test data
k <- 1 # "01262" (Munich); "02014" (Hannover)
station <- c("MÃ¼nchen-Flughafen", "Hannover", sample(names, 1))[k]
train <- data[data$date <= as.Date("2018-05-31") & data$name == station, vars]
test <- data[data$date > as.Date("2018-05-31") & data$name == station, vars]
# fit model u-component
m_u <- glmboostLSS(formula = obs.u ~ .,
data = train[, -2],
families = GaussianLSS(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# fit model v-component
m_v <- glmboostLSS(formula = obs.v ~ .,
data = train[, -1],
families = GaussianLSS(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# fit bivariate normal distribution
m_uv <- glmboostLSS(formula = cbind(obs.u, obs.v) ~.,
data = train,
families = GaussianBV(),
method = "noncyclic",
control = boost_control(mstop = 2000),
center = TRUE)
# get parameters for test period
pars_u <- predict(m_u, newdata = test, type = "response")
pars_v <- predict(m_v, newdata = test, type = "response")
pars_uv <- predict(m_uv, newdata = test, type = "response")
###################################
# UNIVARIATE EVALUATION
###################################
m <- 51 # number of ensemble forecasts
ae(y = test$obs.u, x = as.vector(pars_u$mu), aggregate = mean)
ae(y = test$obs.u, x = pars_u$mu, aggregate = mean)
ae(y = test$obs.u, x = mean(pars_u$mu), aggregate = mean)
pars_u$mu
test$obs.u-pars_u$mu
mean(test$obs.u-pars_u$mu)
test$obs.u
as.vector(pars_u$mu)
test$obs.u-as.vector(pars_u$mu)
mean(test$obs.u-as.vector(pars_u$mu)[1])
mean(abs(test$obs.u-as.vector(pars_u$mu)[1]))
mean(crps_norm(y = test$obs.u, mean = pars_u$mu, sd = pars_u$sigma))
mean(crps_norm(y = test$obs.u, mean = as.vector(pars_u$mu), sd = as.vector(pars_u$sigma)))
is.matrix(pars_u$mu)
pars_u$mu
library(eppverification)
ae(y = y, x = x1, aggregate = mean)n <- 30
n <- 30
m <- 50
y <- rnorm(n)
x1 <- matrix(rnorm(n*m), ncol = m)
x2 <- apply(x1, 1, median)
ae(y = y, x = x1)
ae(y = y, x = x1, aggregate = mean)
n <- 30
m1 <- 50
m2 <- 3
m3 <- 10000
y <- rnorm(n)
x1 <- matrix(rnorm(n*m1), ncol = m1)
x2 <- matrix(rnorm(n*m2), ncol = m2)
x3 <- matrix(rnorm(n*m3), ncol = m3)
# crps calculation
crps(y = y, x = x1, method = "ens")
crps(y = y, x = x1, method = "ens", aggregate = mean)
library(eppverification)
p <- runif(100, 0, 0.1)
bh.test(p = p)
p <- runif(100, 0, 0.05)
bh.test(p = p)
p <- runif(100, 0, 0.1)
p
p <- runif(100, 0, 0.1)
p <- runif(100, 0, 0.06)
bh.test(p = p)
library(eppverification)
n <- 30
m <- 50
y <- rnorm(n)
x1 <- matrix(rnorm(n*m), ncol = m)
x2 <- apply(x1, 1, median)
# ae calculation
ae(y = y, x = x1)
ae(y = y, x = x1, aggregate = mean)
ae(y = y, x = x2)
(mae <- ae(y = y, x = x2, aggregate = mean))
mean(ae(y = y, x = x2))
library(eppverification)
install.packages("roxygen2")
library(roxygen2)
version("roxygen2")
library(eppverification)
