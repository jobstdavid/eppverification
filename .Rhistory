m<- 51
interval.range <-
(m-1)/(m+1)*100
interval.range
alpha <- (100 - interval.range)/100
alpha
dm.test <- function(s1, s2, alternative = c("two.sided", "less", "greater"), h = 1) {
if (length(s1) != length(s2)) {
stop("Imput vectors must have same length!")
}
alternative <- match.arg(alternative)
dname <- paste(deparse(substitute(s1)), deparse(substitute(s2)))
d <- s1 - s2
if (any(is.na(d))) {
warning("Missig values: autocovariance estimate may not be valid!")
}
d <- d[complete.cases(d)]
n_d <- length(d)
acf_est <- acf(d, type = "covariance", lag.max = h - 1, plot = FALSE)
d_acf <- acf_est$acf[, , 1]
d_var <- sum(c(d_acf[1], 2 * d_acf[-1]))/n_d
if (d_var < 0) {
S <- NA
pval <- 0
} else {
S <- mean(d)/sqrt(d_var)
if (alternative == "two.sided") {
pval <- 2 * pnorm(-abs(S))
} else if (alternative == "less") {
pval <- pnorm(S)
} else if (alternative == "greater") {
pval <- pnorm(S, lower.tail = FALSE)
}
}
para <- h
names(para) <- c("Forecast Horizon = ")
out <- list(statistic = c(DM = S), parameter = para, p.value = pval,
alternative = alternative, method = "Diebold-Mariano Test", data.name = dname)
class(out) <- "htest"
return(out)
}
n <- 365
s1 <- runif(n)
s2 <- s1 - 0.2
dm.test(s1, s2)
dm.test <- function(s1, s2, alternative = c("two.sided", "less", "greater"), h = 1) {
if (length(s1) != length(s2)) {
stop("Imput vectors must have same length!")
}
alternative <- match.arg(alternative)
dname <- paste(deparse(substitute(s1)), deparse(substitute(s2)))
d <- s1 - s2
if (any(is.na(d))) {
warning("Missig values: autocovariance estimate may not be valid!")
}
d <- d[complete.cases(d)]
n_d <- length(d)
acf_est <- acf(d, type = "covariance", lag.max = h - 1, plot = FALSE)
d_acf <- acf_est$acf[, , 1]
d_var <- sum(c(d_acf[1], 2 * d_acf[-1]))/n_d
if (d_var < 0) {
S <- NA
pval <- 0
} else {
S <- mean(d)/sqrt(d_var)
if (alternative == "two.sided") {
pval <- 2 * pnorm(-abs(S))
} else if (alternative == "less") {
pval <- pnorm(S)
} else if (alternative == "greater") {
pval <- pnorm(S, lower.tail = FALSE)
}
}
para <- h
names(para) <- c("Forecast Horizon")
out <- list(statistic = c(DM = S), parameter = para, p.value = pval,
alternative = alternative, method = "Diebold-Mariano Test", data.name = dname)
class(out) <- "htest"
return(out)
}
dm.test(s1, s2)
dm.test(s1, s2, alternative = "two.sided")
dm.test(s1, s2, alternative = "greater")
dm.test(s1, s1, alternative = "two.sided")
dm.test(s1, s1-0.01, alternative = "two.sided")
if (length(s1) != length(s2)) {
stop("Imput vectors must have same length!")
}
alternative <- match.arg(alternative)
dname <- paste(deparse(substitute(s1)), deparse(substitute(s2)))
d <- s1 - s2
if (any(is.na(d))) {
warning("Missig values: autocovariance estimate may not be valid!")
}
d <- d[complete.cases(d)]
n_d <- length(d)
acf_est <- acf(d, type = "covariance", lag.max = h - 1, plot = FALSE)
d_acf <- acf_est$acf[, , 1]
d_var <- sum(c(d_acf[1], 2 * d_acf[-1]))/n_d
h=1
if (length(s1) != length(s2)) {
stop("Imput vectors must have same length!")
}
alternative <- match.arg(alternative)
dname <- paste(deparse(substitute(s1)), deparse(substitute(s2)))
d <- s1 - s2
if (any(is.na(d))) {
warning("Missig values: autocovariance estimate may not be valid!")
}
d <- d[complete.cases(d)]
n_d <- length(d)
acf_est <- acf(d, type = "covariance", lag.max = h - 1, plot = FALSE)
d_acf <- acf_est$acf[, , 1]
d_var <- sum(c(d_acf[1], 2 * d_acf[-1]))/n_d
alternative <- "two.sided"
d_var < 0
S <- mean(d)/sqrt(d_var)
S
2 * pnorm(-abs(S))
pval <- 2 * pnorm(-abs(S))
list(statistic = c(DM = S), parameter = para, p.value = pval,
alternative = alternative, method = "Diebold-Mariano Test", data.name = dname)
para <- h
names(para) <- c("Forecast Horizon")
pval <- 2 * pnorm(-abs(S))
list(statistic = c(DM = S), parameter = para, p.value = pval,
alternative = alternative, method = "Diebold-Mariano Test", data.name = dname)
out <- list(statistic = c(DM = S), parameter = para, p.value = pval,
alternative = alternative, method = "Diebold-Mariano Test", data.name = dname)
class(out) <- "htest"
class
out
s1 <- arima.sim(list(ar = 0.7), sd = 0.5, 100)
s2 <- arima.sim(list(ar = 0.7), sd = 0.5, 100) - 0.1
dm.test(s1, s2)
s2 <- arima.sim(list(ar = 0.7), sd = 0.5, 100) - 0.05
s1 <- arima.sim(list(ar = 0.7), sd = 0.5, 100)
dm.test(s1, s2)
s2 <- arima.sim(list(ar = 0.7), sd = 0.5, 100) - 0.2
dm.test(s1, s2)
library(eppverification)
library(eppverification)
library(eppverification)
m <- 50
n <- 30
y <- cbind(rnorm(n), rgamma(n, shape = 1))
x <- array(NA, dim = c(m, 2, n))
x[, 1, ] <- rnorm(n*m)
x[, 2, ] <- rgamma(n*m, shape = 1)
mrnk(y = y, x = x, method = "mst")
if (!is.matrix(y)) {
stop("'y' should be a matrix!")
}
if (!is.array(x)) {
stop("'x' should be a 3-dimensional array!")
}
dimensions <- apply(x, 3, dim)
if (nrow(y) != ncol(dimensions)) {
stop("The third dimension of 'x' and the number of rows of 'y' are not equal!")
}
if(length(unique(dimensions[1, ])) != 1) {
stop("The entries of 'x' don't have equal numbers of rows!")
}
if(length(unique(dimensions[2, ])) != 1) {
stop("The entries of 'x' don't have equal numbers of columns!")
}
if(dimensions[2, 1] != ncol(y)) {
stop("The number of columns of the entries of 'x' is not equal with the number of columns of 'y'!")
}
index <- which(apply(is.finite(y), 1, all))
rank <- c()
index
i=1
x.data <- x[, , i]
x.data <- matrix(x.data[apply(is.finite(x.data), 1, all), ], ncol = ncol(x.data))
data <- cbind(y[i, ], t(x.data))
data
l.mst <- NULL
dim(data)[2]
euc.dist <- rdist(t(x[, -k]))
library(fields)
euc.dist <- rdist(t(x[, -k]))
k=1
euc.dist <- rdist(t(x[, -k]))
rdist(t(data[, -k]))
library(eppverification)
